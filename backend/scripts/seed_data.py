import sys
import os
sys.path.insert(0, os.path.dirname(os.path.dirname(__file__)))

from app.database import get_db_context
from app.models import BlockedKeyword, SchemaVersion

def seed_crisis_keywords():
    """Seed crisis detection keywords"""
    with get_db_context() as db:
        # Check if already seeded
        existing = db.query(BlockedKeyword).count()
        if existing > 0:
            print(f"‚è≠Ô∏è  Keywords already seeded ({existing} records)")
            return
        
        keywords = [
            ("t·ª± t·ª≠", "suicide", "critical", "vi"),
            ("t·ª± s√°t", "suicide", "critical", "vi"),
            ("mu·ªën ch·∫øt", "suicide", "critical", "vi"),
            ("k·∫øt th√∫c cu·ªôc ƒë·ªùi", "suicide", "critical", "vi"),
            ("kh√¥ng mu·ªën s·ªëng n·ªØa", "suicide", "critical", "vi"),
            ("c·∫Øt tay", "self_harm", "high", "vi"),
            ("t·ª± l√†m ƒëau", "self_harm", "high", "vi"),
            ("l√†m h·∫°i b·∫£n th√¢n", "self_harm", "high", "vi"),
            ("b·ªã ƒë√°nh ƒë·∫≠p", "violence", "high", "vi"),
            ("b·∫°o l·ª±c gia ƒë√¨nh", "violence", "high", "vi"),
            ("x√¢m h·∫°i", "abuse", "critical", "vi"),
        ]
        
        for keyword, category, severity, language in keywords:
            kw = BlockedKeyword(
                keyword=keyword,
                category=category,
                severity=severity,
                language=language
            )
            db.add(kw)
        
        db.commit()
        print(f"‚úÖ Seeded {len(keywords)} crisis keywords")

if __name__ == "__main__":
    print("üå± Seeding database...")
    seed_crisis_keywords()
    print("‚úÖ Seeding completed!")