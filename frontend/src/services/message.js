// File: src/services/message.js

import api from './api';
import encryptionService from '../utils/encryption';

/**
 * Message Service
 * ƒê√£ c·∫•u h√¨nh th√™m logic gi·∫£i m√£ cho ph·∫£n h·ªìi v√† l·ªãch s·ª≠.
 */
class MessageService {
    
    /**
     * Send message: M√£ h√≥a tin nh·∫Øn ng∆∞·ªùi d√πng, g·ªçi API, v√† Gi·∫£i m√£ ph·∫£n h·ªìi AI.
     * @param {string} sessionId - ID c·ªßa phi√™n chat hi·ªán t·∫°i (Ch√≠nh l√† Session Token).
     * @param {string} content - N·ªôi dung tin nh·∫Øn CH∆ØA M√É H√ìA.
     * @param {boolean} [isEncrypted=true] - C·ªù x√°c ƒë·ªãnh c√≥ m√£ h√≥a hay kh√¥ng.
     */
    async sendMessage(sessionId, content, isEncrypted = true) {
        try {
            let finalContent = content;
            
            // 1. M√É H√ìA TIN NH·∫ÆN NG∆Ø·ªúI D√ôNG
            if (isEncrypted) {
                console.log(`[MessageService] Encrypting user message for session: ${sessionId}`);
                finalContent = await encryptionService.encrypt(content, sessionId);
            }

            // 2. G·ªåI API BACKEND
            // üî• S·ª¨A L·ªñI: Th√™m 'session_token' v√†o body theo y√™u c·∫ßu c·ªßa Pydantic schema MessageCreate
            const response = await api.post(`/sessions/${sessionId}/messages`, {
                content: finalContent,
                session_token: sessionId, // <--- KH·∫ÆC PH·ª§C L·ªñI 400 Bad Request
                encrypted: isEncrypted     // Gi·ªØ l·∫°i c·ªù E2E
            });

            const responseData = response.data;

            // 3. X·ª¨ L√ù V√Ä GI·∫¢I M√É PH·∫¢N H·ªíI T·ª™ AI (D·ª±a tr√™n AIMessageResponse schema)
            const aiMessage = responseData.ai_message;
            const userMessageEcho = responseData.user_message; // Tin nh·∫Øn ng∆∞·ªùi d√πng ƒë∆∞·ª£c g·ª≠i l·∫°i

            // Gi·∫£i m√£ tin nh·∫Øn AI
            if (aiMessage && aiMessage.content && aiMessage.encrypted) {
                console.log(`[MessageService] Decrypting AI response for session: ${sessionId}`);
                aiMessage.content = await encryptionService.decrypt(
                    aiMessage.content,
                    sessionId
                );
            }
            
            // Gi·∫£i m√£ tin nh·∫Øn ng∆∞·ªùi d√πng echo
            if (userMessageEcho && userMessageEcho.content && userMessageEcho.encrypted) {
                console.log(`[MessageService] Decrypting user message echo for session: ${sessionId}`);
                userMessageEcho.content = await encryptionService.decrypt(
                    userMessageEcho.content,
                    sessionId
                );
            }

            return responseData; // Tr·∫£ v·ªÅ to√†n b·ªô data ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω (v√† gi·∫£i m√£)

        } catch (error) {
            console.error('[MessageService] Failed to send message:', error);
            throw error;
        }
    }

    /**
     * Get session messages: L·∫•y l·ªãch s·ª≠ tin nh·∫Øn v√† Gi·∫£i m√£ T·∫§T C·∫¢ tin nh·∫Øn.
     * @param {string} sessionId - ID c·ªßa phi√™n chat hi·ªán t·∫°i.
     */
    async getMessages(sessionId) {
        try {
            const response = await api.get(`/sessions/${sessionId}/messages`);
            let messages = response.data.messages || []; // Gi·∫£ ƒë·ªãnh messages n·∫±m trong response.data.messages
            
            // 2. GI·∫¢I M√É T·∫§T C·∫¢ TIN NH·∫ÆN
            console.log(`[MessageService] Decrypting ${messages.length} messages for session: ${sessionId}`);
            
            const decryptedMessages = await Promise.all(
                messages.map(async (message) => {
                    // Ch·ªâ gi·∫£i m√£ n·∫øu message c√≥ n·ªôi dung v√† ƒë∆∞·ª£c ƒë√°nh d·∫•u l√† 'encrypted'
                    if (message.content && message.encrypted) {
                        try {
                            message.content = await encryptionService.decrypt(
                                message.content, 
                                sessionId
                            );
                        } catch (decryptError) {
                            console.error(`[MessageService] Failed to decrypt message ID ${message.id}:`, decryptError);
                            // ƒê√°nh d·∫•u n·ªôi dung l√† l·ªói
                            message.content = "‚ö†Ô∏è L·ªói: Kh√¥ng th·ªÉ gi·∫£i m√£ tin nh·∫Øn n√†y."; 
                        }
                    }
                    return message;
                })
            );

            return decryptedMessages;

        } catch (error) {
            console.error('[MessageService] Failed to get messages:', error);
            throw error;
        }
    }

    /**
     * Submit feedback (Kh√¥ng thay ƒë·ªïi logic m√£ h√≥a/gi·∫£i m√£ ·ªü ƒë√¢y)
     */
    async submitFeedback(sessionId, messageId, rating, comment = null) {
        try {
            const response = await api.post(`/sessions/${sessionId}/feedback`, {
                message_id: messageId,
                rating,
                comment
            });
            return response.data;
        } catch (error) {
            console.error('Failed to submit feedback:', error);
            throw error;
        }
    }
}

export default new MessageService();